import { forwardRef, useState } from 'react';
import { cn } from '../../utils/utils';

export interface InputProps extends React.ComponentProps<'input'> {
  className?: string;
  onReset?: () => void;
  showClearButton?: boolean;
  value?: string;
}

export const Input = forwardRef<HTMLInputElement, InputProps>(
  ({ className = '', onReset, showClearButton = true, type, value, ...props }, ref) => {
    const [isFocused, setIsFocused] = useState(false);
    const [showPassword, setShowPassword] = useState(false);
    const shouldShowClearButton = showClearButton && type !== 'password' && isFocused;

    return (
      <div className="relative w-full">
        <input
          ref={ref}
          type={type === 'password' && showPassword ? 'text' : type}
          value={value}
          onFocus={() => setIsFocused(true)}
          onBlur={() => setIsFocused(false)}
          className={cn(
            `w-full h-12 border border-solid border-custom-gray rounded-lg focus:outline-2 focus:outline-[#464646] px-[16px] py-3`,
            className
          )}
          {...props}
        />

        <div className="absolute right-3 top-1/2 -translate-y-1/2 flex gap-2">
          {shouldShowClearButton && (
            <button
              type="button"
              onMouseDown={(e) => {
                e.preventDefault();
                e.stopPropagation();
                onReset?.();
              }}
              className="absolute right-3 top-1/2 -translate-y-1/2 cursor-pointer"
            >
              <svg width="24" height="25" viewBox="0 0 24 25" fill="none" xmlns="http://www.w3.org/2000/svg">
                <path
                  d="M22 12.3398C22 17.8627 17.5228 22.3398 12 22.3398C6.47715 22.3398 2 17.8627 2 12.3398C2 6.817 6.47715 2.33984 12 2.33984C17.5228 2.33984 22 6.817 22 12.3398Z"
                  fill="#E6E6E6"
                />
                <path
                  d="M15.59 7.33984L12 10.9298L8.41 7.33984L7 8.74984L10.59 12.3398L7 15.9298L8.41 17.3398L12 13.7498L15.59 17.3398L17 15.9298L13.41 12.3398L17 8.74984L15.59 7.33984Z"
                  fill="#6D6D6D"
                />
              </svg>
            </button>
          )}

          {type === 'password' && (
            <button type="button" onClick={() => setShowPassword(!showPassword)} className="cursor-pointer">
              {showPassword ? (
                <svg width="22" height="16" viewBox="0 0 22 16" fill="none" xmlns="http://www.w3.org/2000/svg">
                  <path
                    d="M10.9998 12.3398C12.2498 12.3398 13.3125 11.9025 14.1878 11.0278C15.0625 10.1525 15.4998 9.08984 15.4998 7.83984C15.4998 6.58984 15.0625 5.52718 14.1878 4.65184C13.3125 3.77718 12.2498 3.33984 10.9998 3.33984C9.7498 3.33984 8.68714 3.77718 7.8118 4.65184C6.93714 5.52718 6.4998 6.58984 6.4998 7.83984C6.4998 9.08984 6.93714 10.1525 7.8118 11.0278C8.68714 11.9025 9.7498 12.3398 10.9998 12.3398ZM10.9998 10.5398C10.2498 10.5398 9.61247 10.2772 9.0878 9.75184C8.56247 9.22718 8.2998 8.58984 8.2998 7.83984C8.2998 7.08984 8.56247 6.45218 9.0878 5.92684C9.61247 5.40218 10.2498 5.13984 10.9998 5.13984C11.7498 5.13984 12.3875 5.40218 12.9128 5.92684C13.4375 6.45218 13.6998 7.08984 13.6998 7.83984C13.6998 8.58984 13.4375 9.22718 12.9128 9.75184C12.3875 10.2772 11.7498 10.5398 10.9998 10.5398ZM10.9998 15.3398C8.68314 15.3398 6.56647 14.7275 4.64981 13.5028C2.73314 12.2775 1.28314 10.6232 0.299805 8.53984C0.249805 8.45651 0.216471 8.35218 0.199805 8.22684C0.183138 8.10218 0.174805 7.97318 0.174805 7.83984C0.174805 7.70651 0.183138 7.57718 0.199805 7.45184C0.216471 7.32718 0.249805 7.22318 0.299805 7.13984C1.28314 5.05651 2.73314 3.40251 4.64981 2.17784C6.56647 0.95251 8.68314 0.339844 10.9998 0.339844C13.3165 0.339844 15.4331 0.95251 17.3498 2.17784C19.2665 3.40251 20.7165 5.05651 21.6998 7.13984C21.7498 7.22318 21.7831 7.32718 21.7998 7.45184C21.8165 7.57718 21.8248 7.70651 21.8248 7.83984C21.8248 7.97318 21.8165 8.10218 21.7998 8.22684C21.7831 8.35218 21.7498 8.45651 21.6998 8.53984C20.7165 10.6232 19.2665 12.2775 17.3498 13.5028C15.4331 14.7275 13.3165 15.3398 10.9998 15.3398ZM10.9998 13.3398C12.8831 13.3398 14.6125 12.8438 16.1878 11.8518C17.7625 10.8605 18.9665 9.52318 19.7998 7.83984C18.9665 6.15651 17.7625 4.81884 16.1878 3.82684C14.6125 2.83551 12.8831 2.33984 10.9998 2.33984C9.11647 2.33984 7.38714 2.83551 5.8118 3.82684C4.23714 4.81884 3.03314 6.15651 2.1998 7.83984C3.03314 9.52318 4.23714 10.8605 5.8118 11.8518C7.38714 12.8438 9.11647 13.3398 10.9998 13.3398Z"
                    fill="#6D6D6D"
                  />
                </svg>
              ) : (
                <svg width="22" height="20" viewBox="0 0 22 20" fill="none" xmlns="http://www.w3.org/2000/svg">
                  <path
                    d="M15.0998 10.6399L13.6498 9.18994C13.7998 8.40661 13.5748 7.67327 12.9748 6.98994C12.3748 6.30661 11.5998 6.03994 10.6498 6.18994L9.1998 4.73994C9.48314 4.60661 9.77047 4.50661 10.0618 4.43994C10.3538 4.37327 10.6665 4.33994 10.9998 4.33994C12.2498 4.33994 13.3125 4.77728 14.1878 5.65194C15.0625 6.52728 15.4998 7.58994 15.4998 8.83994C15.4998 9.17327 15.4665 9.48594 15.3998 9.77794C15.3331 10.0693 15.2331 10.3566 15.0998 10.6399ZM18.2998 13.7899L16.8498 12.3899C17.4831 11.9066 18.0458 11.3773 18.5378 10.8019C19.0291 10.2273 19.4498 9.57327 19.7998 8.83994C18.9665 7.15661 17.7705 5.81894 16.2118 4.82694C14.6538 3.83561 12.9165 3.33994 10.9998 3.33994C10.5165 3.33994 10.0415 3.37327 9.5748 3.43994C9.10814 3.50661 8.6498 3.60661 8.1998 3.73994L6.64981 2.18994C7.33314 1.90661 8.03314 1.69394 8.7498 1.55194C9.46647 1.41061 10.2165 1.33994 10.9998 1.33994C13.3831 1.33994 15.5248 1.96894 17.4248 3.22694C19.3248 4.48561 20.7498 6.12327 21.6998 8.13994C21.7498 8.22328 21.7831 8.32728 21.7998 8.45194C21.8165 8.57728 21.8248 8.70661 21.8248 8.83994C21.8248 8.97327 21.8125 9.10228 21.7878 9.22694C21.7625 9.35228 21.7331 9.45661 21.6998 9.53994C21.3165 10.3899 20.8375 11.1733 20.2628 11.8899C19.6875 12.6066 19.0331 13.2399 18.2998 13.7899ZM18.0998 19.2399L14.5998 15.7899C14.0165 15.9733 13.4291 16.1109 12.8378 16.2029C12.2458 16.2943 11.6331 16.3399 10.9998 16.3399C8.61647 16.3399 6.4748 15.7109 4.5748 14.4529C2.6748 13.1943 1.2498 11.5566 0.299805 9.53994C0.249805 9.45661 0.216471 9.35228 0.199805 9.22694C0.183138 9.10228 0.174805 8.97327 0.174805 8.83994C0.174805 8.70661 0.183138 8.58161 0.199805 8.46494C0.216471 8.34827 0.249805 8.24827 0.299805 8.16494C0.649805 7.41494 1.06647 6.72327 1.5498 6.08994C2.03314 5.45661 2.56647 4.87327 3.1498 4.33994L1.0748 2.23994C0.891471 2.05661 0.799805 1.82727 0.799805 1.55194C0.799805 1.27727 0.899805 1.03994 1.0998 0.839942C1.28314 0.656608 1.51647 0.564941 1.7998 0.564941C2.08314 0.564941 2.31647 0.656608 2.4998 0.839942L19.4998 17.8399C19.6831 18.0233 19.7791 18.2526 19.7878 18.5279C19.7958 18.8026 19.6998 19.0399 19.4998 19.2399C19.3165 19.4233 19.0831 19.5149 18.7998 19.5149C18.5165 19.5149 18.2831 19.4233 18.0998 19.2399ZM4.5498 5.73994C4.06647 6.17327 3.6248 6.64827 3.2248 7.16494C2.8248 7.68161 2.48314 8.23994 2.1998 8.83994C3.03314 10.5233 4.22881 11.8606 5.78681 12.8519C7.34547 13.8439 9.08314 14.3399 10.9998 14.3399C11.3331 14.3399 11.6581 14.3193 11.9748 14.2779C12.2915 14.2359 12.6165 14.1899 12.9498 14.1399L12.0498 13.1899C11.8665 13.2399 11.6915 13.2773 11.5248 13.3019C11.3581 13.3273 11.1831 13.3399 10.9998 13.3399C9.7498 13.3399 8.68714 12.9026 7.8118 12.0279C6.93714 11.1526 6.4998 10.0899 6.4998 8.83994C6.4998 8.65661 6.51214 8.48161 6.53681 8.31494C6.56214 8.14828 6.5998 7.97327 6.64981 7.78994L4.5498 5.73994Z"
                    fill="#6D6D6D"
                  />
                </svg>
              )}
            </button>
          )}
        </div>
      </div>
    );
  }
);

Input.displayName = 'Input';
